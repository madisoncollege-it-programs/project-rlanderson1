#!/usr/bin/env python3

"""
apache_log_analyzer.py
# Author: Rae Denruiter
# Email: rlanderson1@wisc.edu
# Description: This script is part of the course project. It automates the process of cloning a repository, updating README.md,
# and interesting with the user to continue or exit the
# program.
"""

import sys

#Add Output
description = "Analyze an Apache web log.  We will look to see if those is anyone trying to hack our website."

print(description)

if len(sys.argv) > 1:
    user_response = sys.argv[1]

#Ask the user if they want to continue
else:
    user_response = input("Would you like to continue? {y or n}")

#() is a function to make it case sensitive
if user_response.lower() == 'y' or user_response.lower() == 'yes' or user_response.lower() == 'yeah':
            
        #print(f"User input received: {user_input}")
        #Setting the apache log entry to the standard format with multiple log entries
        apache_log_entry = """111.222.333.123 HOME - [01/Feb/1998:01:08:39 -0800] "GET /bannerad/ad.htm HTTP/1.0" 200 198 "http://www.referrer.com/bannerad/ba_intro.htm" "Mozilla/4.01 (Macintosh; I; PPC)"
        apache_log = 111.222.333.123 HOME - [01/Feb/1998:01:08:39 -0800] "GET /bannerad/ad.htm HTTP/1.0" 200 198 "http://www.referrer.com/bannerad/ba_intro.htm" "Mozilla/4.01 (Macintosh; I; PPC)"
        111.222.333.124 HOME - [01/Feb/1998:01:08:46 -0800] "GET /bannerad/ad.htm HTTP/1.0" 200 28083 "http://www.referrer.com/bannerad/ba_intro.htm" "Mozilla/4.01 (Macintosh; I; PPC)"
        111.222.333.125 AWAY - [01/Feb/1998:01:08:53 -0800] "GET /bannerad/ad7.gif HTTP/1.0" 401 9332 "http://www.referrer.com/bannerad/ba_ad.htm" "Mozilla/4.01 (Macintosh; I; PPC)"
        111.222.333.126 AWAY - [01/Feb/1998:01:09:14 -0800] "GET /bannerad/click.htm HTTP/1.0" 501 207 "http://www.referrer.com/bannerad/menu.htm" "Mozilla/4.01 (Macintosh; I; PPC)"""

        #Opening the apache log file we want to process
        apache_log_file = open("m5-access.log", "r")

        #Reading in the log file into one large string
        apache_log = apache_log_file.read()

        ##Splitting the entire log into individual log entries (1 per line)
        #apache_log_entries = apache_log_entry.split('\n')
        apache_log_entries = apache_log.split('\n')
        #print(apache_log_entries)

        #Open a new file to output our analysis
        apache_log_analysis = open('apache_analysis.txt', 'w')

        #Looping through each log entry in my list of log enteries
for entry in apache_log_entries:

        #Grabbing the first 16 charaters of the log entry which is the IP Address
        #ip_address = entry[0:15:1]
        #print(f"IPAddress is: {ip_address}")
        #print(f"Log request from: {ip_address:*^22s}")
        #ip_address = entry[0:15:1]
        #Split the string to get the return code
        apache_log_entry_items = entry.split(' ')

        #Grabbing the correct elements of the apache log entry to output IP and return code
        ip_address = apache_log_entry_items[0]
        return_code = apache_log_entry_items[8]


        #print(f"Return Code: {return_code}")

        #Summarizing information to print to the screen and save to a file
        summary = (f"{ip_address} - {return_code}")
        if return_code >= '400':
            print(summary)
#print(f"IPAddress is: {ip_address}")

        if return_code >= '500':
            apache_log_analysis.write(summary + "\n")

        #Closing our analysis file
        apache_log_analysis.close()
        apache_log_file.close()
        
else:
    print("You chose not to continue.  Exiting the program...")
